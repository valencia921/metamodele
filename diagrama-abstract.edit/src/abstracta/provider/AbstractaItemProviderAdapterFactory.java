/**
 */
package abstracta.provider;

import abstracta.util.AbstractaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AbstractaItemProviderAdapterFactory extends AbstractaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdPaquete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdPaqueteItemProvider tcdPaqueteItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdPaquete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdPaqueteAdapter() {
		if (tcdPaqueteItemProvider == null) {
			tcdPaqueteItemProvider = new TcdPaqueteItemProvider(this);
		}

		return tcdPaqueteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdClase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdClaseItemProvider tcdClaseItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdClase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdClaseAdapter() {
		if (tcdClaseItemProvider == null) {
			tcdClaseItemProvider = new TcdClaseItemProvider(this);
		}

		return tcdClaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdAtributo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdAtributoItemProvider tcdAtributoItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdAtributo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdAtributoAdapter() {
		if (tcdAtributoItemProvider == null) {
			tcdAtributoItemProvider = new TcdAtributoItemProvider(this);
		}

		return tcdAtributoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdMetodo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdMetodoItemProvider tcdMetodoItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdMetodo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdMetodoAdapter() {
		if (tcdMetodoItemProvider == null) {
			tcdMetodoItemProvider = new TcdMetodoItemProvider(this);
		}

		return tcdMetodoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdAsociacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdAsociacionItemProvider tcdAsociacionItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdAsociacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdAsociacionAdapter() {
		if (tcdAsociacionItemProvider == null) {
			tcdAsociacionItemProvider = new TcdAsociacionItemProvider(this);
		}

		return tcdAsociacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdComposicion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdComposicionItemProvider tcdComposicionItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdComposicion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdComposicionAdapter() {
		if (tcdComposicionItemProvider == null) {
			tcdComposicionItemProvider = new TcdComposicionItemProvider(this);
		}

		return tcdComposicionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdDependencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdDependenciaItemProvider tcdDependenciaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdDependencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdDependenciaAdapter() {
		if (tcdDependenciaItemProvider == null) {
			tcdDependenciaItemProvider = new TcdDependenciaItemProvider(this);
		}

		return tcdDependenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdHerencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdHerenciaItemProvider tcdHerenciaItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdHerencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdHerenciaAdapter() {
		if (tcdHerenciaItemProvider == null) {
			tcdHerenciaItemProvider = new TcdHerenciaItemProvider(this);
		}

		return tcdHerenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdAgregacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdAgregacionItemProvider tcdAgregacionItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdAgregacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdAgregacionAdapter() {
		if (tcdAgregacionItemProvider == null) {
			tcdAgregacionItemProvider = new TcdAgregacionItemProvider(this);
		}

		return tcdAgregacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link abstracta.TcdParametro} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TcdParametroItemProvider tcdParametroItemProvider;

	/**
	 * This creates an adapter for a {@link abstracta.TcdParametro}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTcdParametroAdapter() {
		if (tcdParametroItemProvider == null) {
			tcdParametroItemProvider = new TcdParametroItemProvider(this);
		}

		return tcdParametroItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tcdPaqueteItemProvider != null) tcdPaqueteItemProvider.dispose();
		if (tcdClaseItemProvider != null) tcdClaseItemProvider.dispose();
		if (tcdAtributoItemProvider != null) tcdAtributoItemProvider.dispose();
		if (tcdMetodoItemProvider != null) tcdMetodoItemProvider.dispose();
		if (tcdAsociacionItemProvider != null) tcdAsociacionItemProvider.dispose();
		if (tcdComposicionItemProvider != null) tcdComposicionItemProvider.dispose();
		if (tcdDependenciaItemProvider != null) tcdDependenciaItemProvider.dispose();
		if (tcdHerenciaItemProvider != null) tcdHerenciaItemProvider.dispose();
		if (tcdAgregacionItemProvider != null) tcdAgregacionItemProvider.dispose();
		if (tcdParametroItemProvider != null) tcdParametroItemProvider.dispose();
	}

}
