/**
 */
package diagrama_concreta.provider;

import diagrama_concreta.util.Diagrama_concretaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Diagrama_concretaItemProviderAdapterFactory extends Diagrama_concretaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Diagrama_concretaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDDiagramaClases} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDDiagramaClasesItemProvider tcdDiagramaClasesItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDDiagramaClases}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDDiagramaClasesAdapter() {
		if (tcdDiagramaClasesItemProvider == null) {
			tcdDiagramaClasesItemProvider = new TCDDiagramaClasesItemProvider(this);
		}

		return tcdDiagramaClasesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.ModelFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelFactoryItemProvider modelFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.ModelFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelFactoryAdapter() {
		if (modelFactoryItemProvider == null) {
			modelFactoryItemProvider = new ModelFactoryItemProvider(this);
		}

		return modelFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDPaquete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDPaqueteItemProvider tcdPaqueteItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDPaquete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDPaqueteAdapter() {
		if (tcdPaqueteItemProvider == null) {
			tcdPaqueteItemProvider = new TCDPaqueteItemProvider(this);
		}

		return tcdPaqueteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDClase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDClaseItemProvider tcdClaseItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDClase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDClaseAdapter() {
		if (tcdClaseItemProvider == null) {
			tcdClaseItemProvider = new TCDClaseItemProvider(this);
		}

		return tcdClaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDAsociacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDAsociacionItemProvider tcdAsociacionItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDAsociacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDAsociacionAdapter() {
		if (tcdAsociacionItemProvider == null) {
			tcdAsociacionItemProvider = new TCDAsociacionItemProvider(this);
		}

		return tcdAsociacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDComposicion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDComposicionItemProvider tcdComposicionItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDComposicion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDComposicionAdapter() {
		if (tcdComposicionItemProvider == null) {
			tcdComposicionItemProvider = new TCDComposicionItemProvider(this);
		}

		return tcdComposicionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDDependencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDDependenciaItemProvider tcdDependenciaItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDDependencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDDependenciaAdapter() {
		if (tcdDependenciaItemProvider == null) {
			tcdDependenciaItemProvider = new TCDDependenciaItemProvider(this);
		}

		return tcdDependenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDHerencia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDHerenciaItemProvider tcdHerenciaItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDHerencia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDHerenciaAdapter() {
		if (tcdHerenciaItemProvider == null) {
			tcdHerenciaItemProvider = new TCDHerenciaItemProvider(this);
		}

		return tcdHerenciaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDAgregacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDAgregacionItemProvider tcdAgregacionItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDAgregacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDAgregacionAdapter() {
		if (tcdAgregacionItemProvider == null) {
			tcdAgregacionItemProvider = new TCDAgregacionItemProvider(this);
		}

		return tcdAgregacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDAtributo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDAtributoItemProvider tcdAtributoItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDAtributo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDAtributoAdapter() {
		if (tcdAtributoItemProvider == null) {
			tcdAtributoItemProvider = new TCDAtributoItemProvider(this);
		}

		return tcdAtributoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.class_identifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected class_identifierItemProvider class_identifierItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.class_identifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createclass_identifierAdapter() {
		if (class_identifierItemProvider == null) {
			class_identifierItemProvider = new class_identifierItemProvider(this);
		}

		return class_identifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link diagrama_concreta.TCDMetodo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCDMetodoItemProvider tcdMetodoItemProvider;

	/**
	 * This creates an adapter for a {@link diagrama_concreta.TCDMetodo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCDMetodoAdapter() {
		if (tcdMetodoItemProvider == null) {
			tcdMetodoItemProvider = new TCDMetodoItemProvider(this);
		}

		return tcdMetodoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tcdDiagramaClasesItemProvider != null) tcdDiagramaClasesItemProvider.dispose();
		if (modelFactoryItemProvider != null) modelFactoryItemProvider.dispose();
		if (tcdPaqueteItemProvider != null) tcdPaqueteItemProvider.dispose();
		if (tcdClaseItemProvider != null) tcdClaseItemProvider.dispose();
		if (tcdAgregacionItemProvider != null) tcdAgregacionItemProvider.dispose();
		if (tcdAsociacionItemProvider != null) tcdAsociacionItemProvider.dispose();
		if (tcdComposicionItemProvider != null) tcdComposicionItemProvider.dispose();
		if (tcdDependenciaItemProvider != null) tcdDependenciaItemProvider.dispose();
		if (tcdHerenciaItemProvider != null) tcdHerenciaItemProvider.dispose();
		if (tcdAtributoItemProvider != null) tcdAtributoItemProvider.dispose();
		if (class_identifierItemProvider != null) class_identifierItemProvider.dispose();
		if (tcdMetodoItemProvider != null) tcdMetodoItemProvider.dispose();
	}

}
